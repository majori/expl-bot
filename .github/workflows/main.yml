name: CI

on:
  push:
    branches:
      - master
      - development

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: expl-bot

jobs:
  # Run tests.
  test:
    runs-on: ubuntu-latest
    container: node:14
    defaults:
      run:
        shell: bash

    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - run: npm ci

      - run: npm run test
        env:
          PG_CONNECTION_STRING: postgres://postgres:postgres@postgres:5432/postgres

      - name: Generate Telegram message
        if: ${{ always() }}
        id: telegram_message
        run: |
          if [ $STATUS == "success" ]
          then
            MESSAGE=✅
          else
            MESSAGE=❌
          fi

          MESSAGE="$MESSAGE \"${{ github.event.head_commit.message }}\""
          MESSAGE="$MESSAGE ([#$( echo "${{ github.sha }}" | head -c 7)](https://github.com/${{ github.repository	 }}/commit/${{ github.sha }}))"
          MESSAGE="$MESSAGE @ \`${GITHUB_REF#refs/heads/}\`"
          MESSAGE="$MESSAGE by *${{ github.actor }}*"

          echo "::set-output name=message::$MESSAGE"
        env:
          STATUS: ${{ job.status }}

      - name: Send notification
        if: ${{ always() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: ${{ steps.telegram_message.outputs.message }}
          format: markdown
        env:
          PLUGIN_WEBPAGE_PREVIEW: false

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to GHCR
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
